#!/usr/bin/env python3
# -*- coding: utf-8 -*-

'''
Manage LXC containers like with Docker's fig

Locker enables to specify containers and their configuration in a file similar
to the YAML configuration used by fig.

Features:
- Enables to create new containers from templates or by cloning
- Creates an fstab for bind mounts from the host into the container
- Enables to start and stop all containers defined in the same configuration
  file
- Makes services in containers available to the outside world by port
  forwarding
- ...
'''

__author__ = "BB"
__copyright__ = "Copyright 2014"
__license__ = "GPLv3 or later"
__status__ = "Prototype"

import argcomplete
import argparse
import logging
import os
import pprint
import sys

import lxc
import yaml
from locker import Project
from locker._version import __version__


def parse_args():
    '''
    Parse the command line arguments

    :returns: Dictionary of the parsed arguments
    '''
    parser = argparse.ArgumentParser(description='Manage LXC containers')

    ############################################################################

    parser.add_argument(
        '--verbose', '-v',
        const=True, default=False, action='store_const',
        help='Show more output')

    parser.add_argument(
        '--version',
        const=True, default=False, action='store_const',
        help='Print version and exit')

    parser.add_argument(
        '--file', '-f',
        default='./locker.yaml',
        help='Specify an alternate Locker file (default: ./locker.yaml)')

    parser.add_argument(
        '--project', '-p',
        default=os.path.basename(os.getcwd()),
        help='Specify an alternate project name (default: current directory name)')

    parser.add_argument(
        '--no-color', '-o',
        const=True, default=False, action='store_const',
        help='Do not use colored output')

    parser.add_argument(
        '--validate',
        nargs=1, required=False,
        help='Validate YAML configuration against the specified schema')

    parser.add_argument(
        '--lxcpath', '-P',
        default='/var/lib/lxc', required=False,
        help='Root path the containers (default=/var/lib/lxc)')

    subparsers = parser.add_subparsers(help='sub-command help', dest='command')
    subparsers.required = True

    ############################################################################

    subparser_rm = subparsers.add_parser('rm', help='Delete container')
    subparser_rm.add_argument(
        '--delete-dont-ask', '-x',
        const=True, default=False, action='store_const',
        help='Don\'t ask for confirmation when deleting')

    ############################################################################

    subparser_create = subparsers.add_parser('create', help='Create container')
    subparser_create.add_argument(
        '--dont-copy-on-create', '-d',
        const=True, default=False, action='store_const',
        help='Don\'t copy directories/files defined as bind mounts to host after container creation (default: copy directories/files)')

    ############################################################################

    subparser_start = subparsers.add_parser('start', help='Start container')
    subparser_stop = subparsers.add_parser('stop', help='Stop container')
    subparser_reboot = subparsers.add_parser('reboot', help='Reboot container')

    subparser_start.add_argument(
        '--restart', '-r',
        const=True, default=False, action='store_const',
        help='Restart already running containers when using \"start\" command')

    for sub in [subparser_start, subparser_stop]:
        sub.add_argument(
            '--no-ports', '-n',
            const=True, default=False, action='store_const',
            help='Do not add/remove netfilter rules (used with command start/stop)')

        sub.add_argument(
            '--add-hosts', '-a',
            const=True, default=False, action='store_const',
            help='Add the containers\' hostnames to the /etc/hosts file of this host')

        sub.add_argument(
            '--no-links', '-m',
            const=True, default=False, action='store_const',
            help='Do not add/remove links (used with command start/stop)')

    for sub in [subparser_start, subparser_stop, subparser_reboot]:
        sub.add_argument(
            '--timeout', '-t',
            type=int, default=30,
            help='Timeout for container shutdown')

    ############################################################################

    subparser_status = subparsers.add_parser('status', help='Show container status')

    subparser_status.add_argument(
        '--extended', '-e',
        const=True, default=False, action='store_const',
        help='Show extended status report')

    ############################################################################

    subparser_port = subparsers.add_parser('ports', help='Add port forwarding netfilter rules')
    subparser_rmports = subparsers.add_parser('rmports', help='Remove port forwarding netfilter rules')
    subparser_links = subparsers.add_parser('links', help='Add links between containers')
    subparser_rmlinks = subparsers.add_parser('rmlinks', help='Remove links between containers')
    subparser_cgroup = subparsers.add_parser('cgroup', help='Set cgroup configuration')
    subparser_cleanup = subparsers.add_parser('cleanup', help='Stop containers, remove netfilter rules and bridge')

    ############################################################################

    for sub in [subparser_start, subparser_stop, subparser_reboot,
                subparser_create, subparser_rm, subparser_status,
                subparser_port, subparser_rmports,
                subparser_links, subparser_rmlinks,
                subparser_cgroup]:
        sub.add_argument(
            'containers',
            nargs='*', default=[],
            help='Space separated list of containers (default: all containers)')

    argcomplete.autocomplete(parser)
    args_dict = vars(parser.parse_args())
    return args_dict

def validate(args):
    ''' Validate YAML configuration file

    Validates the YAML configuration file if the the "validate" parameter
    specifies a schema file and the pykwalify module can be imported.

    :param args: Parsed command line parameters
    '''
    if not args['validate']:
        return
    try:
        import pykwalify.core
        from pykwalify.errors import SchemaError
    except ImportError:
        logging.warn('Was not able to import pykwalify module. Cannot validate YAML configuration.')
        sys.exit(1)
    try:
        logging.info('Validating YAML configuration')
        logging.getLogger('pykwalify').setLevel(logging.WARN)
        validator = pykwalify.core.Core(args['file'], args['validate'])
        validator.validate(raise_exception=True)
    except SchemaError as exception:
        logging.error('YAML configuration does not comply to schema: ', exception)
        sys.exit(1)

def main():
    '''
    The main function
    '''
    logging.basicConfig(format='%(asctime)s, %(levelname)8s: %(message)s', level=logging.INFO)
    args = parse_args()
    if args['verbose']:
        logging.root.setLevel(logging.DEBUG)
        logging.debug('Parsed arguments: \n%s', pprint.pformat(args, indent=4))

    if args['version']:
        sys.stdout.write('%s\n' % __version__)
        sys.exit()

    if not os.path.isfile(args['file']):
        logging.critical('Configuration file \"%s\" does not exist or cannot be accessed', args['file'])
        sys.exit(1)
    with open('%s' % (args['file'])) as yaml_file:
        validate(args)
        yml = yaml.load(yaml_file)
    logging.debug('Parsed YAML Configuration: \n%s', pprint.pformat(yml, indent=4))

    if not os.geteuid() == 0:
        logging.fatal("Locker must be run as root to modify netfilter rules and as unprivileged containers are not yet supported.")
        sys.exit(1)
    pro = Project(yml, args)

    if args['command'] == 'status':
        pro.status()
    elif args['command'] == 'start':
        pro.start()
    elif args['command'] == 'stop':
        pro.stop()
    elif args['command'] == 'reboot':
        pro.reboot()
    elif args['command'] == 'create':
        pro.create()
    elif args['command'] == 'rm':
        pro.remove()
    elif args['command'] == 'ports':
        pro.ports()
    elif args['command'] == 'rmports':
        pro.rmports()
    elif args['command'] == 'links':
        pro.links()
    elif args['command'] == 'rmlinks':
        pro.rmlinks()
    elif args['command'] == 'cgroup':
        pro.cgroup()
    elif args['command'] == 'cleanup':
        pro.cleanup()
    else:
        raise RuntimeError('Invalid command: %s' % args['command'])

if __name__ == '__main__':
    main()
